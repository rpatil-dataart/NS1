<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_401282_nsone_int.SystemLogHelper</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>SystemLogHelper</name>
        <script><![CDATA[var SystemLogHelper = Class.create();
SystemLogHelper.prototype = {

	initialize: function() {		
		this.getLoggingLevel();
	},

	enableTrace: 'false',
	level: 3,

	logPrefix: {
		_DEBUG: {value:4, dispValue: 'Debug'},
		_INFO: {value:3, dispValue: 'Info'},
		_WARN: {value:2, dispValue: 'Warning'},
		_ERROR: {value:1, dispValue: 'Error'},
		_NONE: {value:0, dispValue: 'None'},
	},


	getLoggingLevel: function(){
		this.level =gs.getProperty('x_401282_nsone_int.logging.level', 3);
	},

	log: function(
	level, //(string) logging level assigned by the verbosity property
	 library, //(string) name of the library/rule/etc where the function/code resides
	 func, //(string)name of the function we are executing
	 msg //(string) the message to log
	) {
		try {

			if (this.level == this.logPrefix._NONE.value) {
				return;
			}

			if (level.value <= this.level) {

				msg = msg.replace(/,/g,",\n");
				msg = msg.replace(/\{/g,"\{\n");
				var dt = new GlideDateTime();
				//prefix += "(" + dt.getNumericValue() + ")";
				var fullMsg = "["+ level.dispValue +"]"+ "[" + dt.getNumericValue() + "] - [" + library + " >> " + func + "] - " + msg;
				
				gs.info(fullMsg);	
			}			

		} catch (e) {
			gs.error(this.type + " Exception: " + e);
		}
	},

	/* Convenience Functions */
	debug: function(library, func, msg) {
		this.log(this.logPrefix._DEBUG, library, func, msg);
	},

	info: function(library, func, msg) {
		this.log(this.logPrefix._INFO, library, func, msg);
	},

	warn: function(library, func, msg) {
		this.log(this.logPrefix._WARN, library, func, msg);
	},

	error: function(library, func, msg) {
		this.log(this.logPrefix._ERROR, library, func, msg);
	},


	/*Test Function*/
	test: function(){
		gs.info("Current Log Level: " + gs.getProperty('x_401282_nsone_int.logging.level'));		
		this.debug(this.type,"test()", "Debug Test");
		this.info(this.type,"test()", "Info Test");		
		this.warn(this.type,"test()", "Warn Test");
		this.error(this.type,"test()", "Error Test");			
	},

	type: 'SystemLogHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>smorey</sys_created_by>
        <sys_created_on>2019-09-15 07:34:16</sys_created_on>
        <sys_id>024cb45fdb3b730021b91ffa68961922</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>SystemLogHelper</sys_name>
        <sys_package display_value="NSOne Integration" source="x_401282_nsone_int">79627e08dbbf330051bde4da4b961982</sys_package>
        <sys_policy/>
        <sys_scope display_value="NSOne Integration">79627e08dbbf330051bde4da4b961982</sys_scope>
        <sys_update_name>sys_script_include_024cb45fdb3b730021b91ffa68961922</sys_update_name>
        <sys_updated_by>smorey</sys_updated_by>
        <sys_updated_on>2019-09-16 19:43:58</sys_updated_on>
    </sys_script_include>
</record_update>
