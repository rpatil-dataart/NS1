<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_401282_nsone_int.ZonesAndRecordsLibrary</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>ZonesAndRecordsLibrary</name>
        <script><![CDATA[var ZonesAndRecordsLibrary = Class.create();
ZonesAndRecordsLibrary.prototype = {

	initialize: function() {

		this.logger = new x_401282_nsone_int.SystemLogHelper();
		var func = "initialize";
		this.logger.info(this.type, func, "Entering Function");

		this.importSetUtil = new x_401282_nsone_int.ImportSetApiUtils();
	},

	/*Facade method to get zones and records*/
	getAllActiveZones: function(){

		/* 
		1. Get All Active Zones
		2. Foreach zone get details
		3. Call Import set API
		4. Transform the Data
		*/

		var func = "getAllActiveZones";
		var zones = new x_401282_nsone_int.NSOneApiZones().getAllZones();
		var zoneImportSetTableName = 'x_401282_nsone_int_di_zone';		

		for(var zone in zones){

			var domainName = zones[zone].zone;		
			this.logger.info(this.type, func, "Attempting to get zone details for: " + domainName);

			//Import Zone details to DNS Zone
			var result = this.importSetUtil.processImportSet(zoneImportSetTableName, zones[zone]);			
			this.logger.debug(this.type, func, "domainName: " + domainName + "\n Import Set API Response"+ JSON.stringify(result));
			
			//Get Zone Details
			//var zoneDetails = new NSOneApiZones().getZoneDetails(domainName);	
			//this.logger.debug(this.type, func, "zone details are "+ JSON.stringify(zoneDetails));

			//Get all records per zone
			//var records = zoneDetails.records;

			//this._processRecords(domainName, records);


		}		
	},

	_processRecords: function(domainName,records){
		
		var func = "_processRecords";
		var recordImportSetTableName =  'x_401282_nsone_int_di_zone_record';

		for (var record in records){				
			this.logger.info(this.type, func, "processing zone record: "+ records[record].domain + " for zone " + domainName);

			var recDomainName = records[record].domain;
			var recType = records[record].type;

			var configDetails = new NSOneApiZones().getRecordConfigurationDetails(domainName, recDomainName, recType);
			this.logger.debug(this.type, func, "record configuration details are "+ JSON.stringify(configDetails));

			//add short_answers from dns details to JSON as this is needed in zone record table 
			configDetails.short_answers = records[record].short_answers;

			//Import record configuration to Zone Record				
			var recImportResult = this.importSetUtil.processImportSet(recordImportSetTableName, configDetails);			
			this.logger.debug(this.type, func, "Record Name : " + recDomainName + "\n Record Import Set API Response"+ JSON.stringify(recImportResult));
		}
	},


	/* *** Tests ***
		new x_401282_nsone_int.ZonesAndRecordsLibrary().getAllActiveZones()
	*/

	type: 'ZonesAndRecordsLibrary'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>smorey</sys_created_by>
        <sys_created_on>2019-09-22 19:04:12</sys_created_on>
        <sys_id>150f53a11bc4841023b9631e6e4bcb22</sys_id>
        <sys_mod_count>31</sys_mod_count>
        <sys_name>ZonesAndRecordsLibrary</sys_name>
        <sys_package display_value="NSOne Integration" source="x_401282_nsone_int">79627e08dbbf330051bde4da4b961982</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NSOne Integration">79627e08dbbf330051bde4da4b961982</sys_scope>
        <sys_update_name>sys_script_include_150f53a11bc4841023b9631e6e4bcb22</sys_update_name>
        <sys_updated_by>smorey</sys_updated_by>
        <sys_updated_on>2019-09-30 18:33:14</sys_updated_on>
    </sys_script_include>
</record_update>
