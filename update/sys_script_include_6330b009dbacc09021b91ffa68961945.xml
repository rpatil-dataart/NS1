<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_401282_nsone_int.CommonUtil</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>CommonUtil</name>
        <script><![CDATA[var CommonUtil = Class.create();
CommonUtil.prototype = {
	initialize: function() {
		this.logger = new x_401282_nsone_int.SystemLogHelper();
	},
	
	/*
     * takes in a sys_id and returns a corresponding GlideRecord object
     * If the sys_id is actually the GlideRecord object, we return the object
     *
     * @returns: Glide Record or Null
     */
	getGr: function(
	sys_id, //(string or GlideRecord) sys_id of the scheduled import record
	 table //(string) name of table
	) {
		var func = "getGr";
		this.logger.debug(this.type, func, "Entering Function");
		this.logger.debug(this.type, func, "Raw sys_id parameter value: " + sys_id);
		this.logger.debug(this.type, func, "table: " + table);

		var gr;
		try {
			if (typeof sys_id == "object" && sys_id.isValidRecord()) {
				this.logger.debug(this.type, func, "Appears to be a GR already.");
				return sys_id;
			}
			if (!sys_id) {
				//this.logger.warn(this.type, func, "No sys_id value...exit");
				this.logger.warn(this.type, func, "No sys_id value...exit");
				return;
			}
			if (!table) {
				//this.logger.warn(this.type, func, "No table specified...exiting");
				this.logger.warn(this.type, func, "No table specified...exiting");
				return;
			}
			gr = new GlideRecord(table);
			if (!gr.isValid()) {
				//this.logger.warn(this.type, func, "Invalid table ("+table+") specified...exiting");
				this.logger.warn(this.type, func, "Invalid table (" + table + ") specified...exiting");
				return;
			}
			gr.get(sys_id);
			if (!gr.isValidRecord()) {
				//this.logger.debug(this.type, func, "Sys_id ("+sys_id+") matches no valid record");
				this.logger.warn(this.type, func, "Sys_id (" + sys_id + ") matches no valid record");
				return;
			}

		} catch (e) {
			this.logger.error(this.type, func, e);
		}
		this.logger.debug(this.type, func, "GR sys_id: " + gr.getValue("sys_id"));
		return gr;

	},

	
	type: 'CommonUtil'
};


]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>smorey</sys_created_by>
        <sys_created_on>2019-10-15 13:35:13</sys_created_on>
        <sys_id>6330b009dbacc09021b91ffa68961945</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>CommonUtil</sys_name>
        <sys_package display_value="NSOne Integration" source="x_401282_nsone_int">79627e08dbbf330051bde4da4b961982</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NSOne Integration">79627e08dbbf330051bde4da4b961982</sys_scope>
        <sys_update_name>sys_script_include_6330b009dbacc09021b91ffa68961945</sys_update_name>
        <sys_updated_by>smorey</sys_updated_by>
        <sys_updated_on>2019-10-23 19:34:19</sys_updated_on>
    </sys_script_include>
</record_update>
