<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_401282_nsone_int.NSOneApiZones</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>NSOneApiZones</name>
        <script><![CDATA[var NSOneApiZones = Class.create();
NSOneApiZones.prototype = Object.extendsObject(x_401282_nsone_int.NSOneApiCore,{

	initialize: function() {
		x_401282_nsone_int.NSOneApiCore.prototype.initialize.call(this);
		this.logger = new x_401282_nsone_int.SystemLogHelper();
		var func = "initialize";
		this.logger.info(this.type, func, "Entering Function");
	},

	/* Get All Zones
	* Sample API Call
	* GET https://api.nsone.net/v1/zones
	*/
	getAllZones: function(){
		var func = "getAllZones";
		this.logger.info(this.type, func, "Entering Function");

		var zones;

		var method = "Get Zones"; //Need to add in constants class or some table
		var endpoint = "NS1-Zones and Records";
		var headers= this.getDefaultRequestHeaders();
		var response = this.sendRequest(method,endpoint, headers, null, null);

		try{
			if (this.responseWasSuccessful(response)) {
				zones = this._populateCMDBWithZone(response);

			} else {
				this.result.nsOneError.errorDetails = "Error";
			}
		}
		catch(e){
			this.logger.error(this.type,func, "Exception thrown in getting zones" + JSON.stringify(e));   
		}
		return zones;
	},

	_populateCMDBWithZone: function(response){

		//This method will have business logis to populate CIs
		var func = "_populateCMDBWithZone";

		this.logger.debug(this.type, func, "Response Body" + response.getBody());
		var responseBody = response.getBody();

		return JSON.parse(responseBody);
	},

	getZoneDetails: function(zone){
		var func = "getZoneDetails";
		this.logger.info(this.type, func, "Entering Function");

		var zoneDetails;

		var method = "Get a zone's details"; //Need to add in constants class or some table
		var endpoint = "NS1-Zones and Records";
		var headers= this.getDefaultRequestHeaders();
		var params = this._getZoneParams(zone);
		var response = this.sendRequest(method,endpoint, headers, params, null);

		try{
			if (this.responseWasSuccessful(response)) {				
				this.logger.debug(this.type, func, "Zone Details " + response.getBody()); 
				zoneDetails = response.getBody();
				
			} else {
				this.result.nsOneError.errorDetails = "Error";
			}
		}
		catch(e){
			this.logger.error(this.type,func, "Exception thrown in getting zones" + JSON.stringify(e));   
		}
		return zoneDetails;
	},

	_getZoneParams: function(zone) {
		var params = [];
		params.push({ "name": "zone", "value": zone });       
		return params;
	},



	/* 
	**********************
	***** Unit Tests *****
	**********************

	//Get All Zones
	var result = new NSOneApiZones().getAllZones();
    gs.info(result);

	//Get a Zones Details
	var result = new NSOneApiZones().getZoneDetails('www.ns1-test.com');
	 gs.info(result);

	*/
	type: 'NSOneApiZones'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-09-05 14:19:47</sys_created_on>
        <sys_id>e5aabe44dbff330051bde4da4b961998</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>NSOneApiZones</sys_name>
        <sys_package display_value="NSOne Integration" source="x_401282_nsone_int">79627e08dbbf330051bde4da4b961982</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="NSOne Integration">79627e08dbbf330051bde4da4b961982</sys_scope>
        <sys_update_name>sys_script_include_e5aabe44dbff330051bde4da4b961998</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-09-25 12:19:51</sys_updated_on>
    </sys_script_include>
</record_update>
